        -:    0:Source:serial_code.c
        -:    0:Graph:serial_code.gcno
        -:    0:Data:serial_code.gcda
        -:    0:Runs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
        -:    6:#define ERROR -20
        -:    7:
        -:    8:// Represents a Stack
        -:    9:struct Stack {
        -:   10:    int * arr;
        -:   11:    int max_size;
        -:   12:    int top;
        -:   13:};
        -:   14:
        -:   15:// Represents an Undirected Graph
        -:   16:struct Graph {
        -:   17:    int E;
        -:   18:    int V;
        -:   19:    int ** adj; // adjacency matrix
        -:   20:};
        -:   21:
        -:   22:/***************************************************************************/
        -:   23:
        -:   24:void init_graph_auto(struct Graph *G, int V, int E);
        -:   25:void init_graph(struct Graph *G);
        -:   26:void check_hamiltonian(struct Graph G);
        -:   27:int num_hamiltonian_cycles(int position, int * visit, struct Graph G, struct Stack *Path);
        -:   28:void push(struct Stack *S, int data);
        -:   29:int pop(struct Stack *S);
        -:   30:void show_stack(struct Stack *S);
        -:   31:void print_graph(struct Graph *G);
        -:   32:
        -:   33:/***************************************************************************/
        -:   34:
        -:   35:
        1:   36:int main() {
        -:   37:    struct Graph G;
        1:   38:    init_graph_auto(&G, 100, 105);      // uncomment to initialize the graph randomly
        -:   39:    // init_graph(&G);                  // uncomment to initialize the graph with user input
        1:   40:    check_hamiltonian(G);
        -:   41:
      101:   42:    for (int i = 0; i < G.V; i++) 
      100:   43:        free(G.adj[i]);
        1:   44:    free(G.adj);
        1:   45:    return 0;
        -:   46:}
        -:   47:
        -:   48:
        -:   49:
        -:   50:/********************** stack operations implementation *******************/
  2794882:   51:void push(struct Stack *S, int data) {
  2794882:   52:    if(S->top > S->max_size - 1)
    #####:   53:        printf("Stack overflow\n");
        -:   54:    else {
  2794882:   55:        S->top++;
  2794882:   56:        S->arr[S->top] = data;
        -:   57:    }
  2794882:   58:}
        -:   59:
279488200:   60:int top(struct Stack *S) {
279488200:   61:    if(S->top > -1) 
279488200:   62:        return S->arr[S->top];
    #####:   63:    printf("Stack is empty!\n");
    #####:   64:    return ERROR;
        -:   65:
        -:   66:}
        -:   67:
  2794881:   68:int pop(struct Stack *S) {
  2794881:   69:    if(S->top > -1) {
  2794881:   70:        int val = S->arr[S->top];
  2794881:   71:        S->top--;
  2794881:   72:        return val;
        -:   73:    }
    #####:   74:    printf("Popping out of empty stack\n");
    #####:   75:    return ERROR;
        -:   76:}
        -:   77:
    #####:   78:void show_stack(struct Stack *S) {
    #####:   79:    printf("[");
    #####:   80:    for(int i = 0; i <= S->top; i++) {
    #####:   81:        printf("%d ", S->arr[i]);
        -:   82:    }
    #####:   83:    printf("\b<---top\n");
    #####:   84:}
        -:   85:
        -:   86:/******************** Graph Initialization related ************************/
        -:   87:
        -:   88:// initializes an undirected graph with V nodes and E edges
        1:   89:void init_graph_auto(struct Graph *G, int V, int E) {
        1:   90:    G->V = V;
        1:   91:    G->E = E;
        1:   92:    srand(time(0));
        1:   93:    G->adj = (int**)malloc(sizeof(int*)*G->V);
      101:   94:    for(int i = 0; i < G->V; i++) {
      100:   95:        G->adj[i] = (int *)malloc(sizeof(int)*G->V);
      100:   96:        memset(G->adj[i], 0, sizeof(int)*G->V);
        -:   97:    }
        -:   98:    int u, v;
      106:   99:    for(int i = 0; i < G->E; i++) {
      105:  100:        u = rand() % G->V;
      105:  101:        v = rand() % G->V;
      105:  102:        G->adj[u][v] = 1;
      105:  103:        G->adj[v][u] = 1;
        -:  104:    }
        1:  105:}
        -:  106:
        -:  107:// initializes an undirected graph based on the user input
    #####:  108:void init_graph(struct Graph *G) {
    #####:  109:    scanf("%d %d", &G->V, &G->E);
    #####:  110:    G->adj = (int**)malloc(sizeof(int*)*G->V);
    #####:  111:    for(int i = 0; i < G->V; i++) {
    #####:  112:        G->adj[i] = (int *)malloc(sizeof(int)*G->V);
    #####:  113:        memset(G->adj[i], 0, sizeof(int)*G->V);
        -:  114:    }
        -:  115:    int u, v;
    #####:  116:    for(int i = 0; i < G->E; i++) {
    #####:  117:        scanf("%d %d", &u, &v);
    #####:  118:        G->adj[v][u] = 1;
    #####:  119:        G->adj[u][v] = 1;
        -:  120:    }
    #####:  121:}
        -:  122:
        -:  123:// prints the graph
    #####:  124:void print_graph(struct Graph *G) {
    #####:  125:    for(int i = 0; i < G->V; i++) {
    #####:  126:        printf("%d: ", i);
    #####:  127:        for(int j = 0; j < G->V; j++) {
    #####:  128:            printf("%d ", G->adj[i][j]);
        -:  129:        }
    #####:  130:        printf("\n");
        -:  131:    }   
    #####:  132:}
        -:  133:
        -:  134:/************************ Couting Hamiltonian cycles *********************/
        -:  135:
        1:  136:void check_hamiltonian(struct Graph G) {
        1:  137:    int visit[G.V];
      101:  138:    for(int i = 0; i < G.V; i++)
      100:  139:        visit[i] = 0;
        -:  140:    struct Stack Path;
        1:  141:    Path.max_size = G.V + 1;
        1:  142:    Path.top = -1;
        1:  143:    Path.arr = (int*)malloc(sizeof(int)*(G.V + 1));
        1:  144:    push(&Path, 0);
        1:  145:    visit[0] = 1;
        1:  146:    int num_cycles = num_hamiltonian_cycles(1, visit, G, &Path);
        1:  147:    printf("#Hamiltonian Cycles = %d\n", num_cycles); 
        -:  148:
        1:  149:}
        -:  150:
        -:  151:// returns the number of hamiltonian cycles present in the undirected graph `G`
  2794882:  152:int num_hamiltonian_cycles(int position, int * visit, struct Graph G, struct Stack *Path) {
  2794882:  153:    if(position == G.V) {
    #####:  154:        if(G.adj[top(Path)][0]) {
    #####:  155:            push(Path, 0);
    #####:  156:            show_stack(Path);
    #####:  157:            pop(Path);
    #####:  158:            return 1;
        -:  159:        }
    #####:  160:        return 0;
        -:  161:    }
  2794882:  162:    int num_cycles = 0;
282283082:  163:    for(int i = 0; i < G.V; i++) {
279488200:  164:        if((G.adj[top(Path)][i] && !visit[i])) {
  2794881:  165:            push(Path, i);
  2794881:  166:            visit[i] = 1;
  2794881:  167:            num_cycles += num_hamiltonian_cycles(position + 1, visit, G, Path);
  2794881:  168:            visit[i] = 0;
  2794881:  169:            pop(Path);
        -:  170:        }
        -:  171:    }
  2794882:  172:    return num_cycles;
        -:  173:}
        -:  174:
        -:  175:/***************************************************************************/
        -:  176:
        -:  177:/* Input types
        -:  178:
        -:  179:17 30
        -:  180:0 1
        -:  181:1 2
        -:  182:2 8
        -:  183:0 8
        -:  184:2 4
        -:  185:2 3
        -:  186:3 4
        -:  187:8 3
        -:  188:3 12
        -:  189:4 12
        -:  190:4 15
        -:  191:14 15
        -:  192:1 9
        -:  193:0 10
        -:  194:9 10
        -:  195:9 14
        -:  196:13 14
        -:  197:13 10
        -:  198:13 16
        -:  199:11 16
        -:  200:10 11
        -:  201:6 11
        -:  202:0 6
        -:  203:5 12
        -:  204:5 6
        -:  205:6 11
        -:  206:7 6
        -:  207:7 5
        -:  208:5 8
        -:  209:3 5
        -:  210:==> 28 cycles
        -:  211:
        -:  212:6 8
        -:  213:0 1
        -:  214:1 2
        -:  215:2 5
        -:  216:4 5
        -:  217:3 4
        -:  218:0 3
        -:  219:1 4
        -:  220:2 3
        -:  221:==> 4 cycles
        -:  222:
        -:  223:
        -:  224:*/
